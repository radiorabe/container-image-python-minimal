{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RaBe Python Base Image Minimal","text":"<p>The RaBe Python Base Image Minimal is a stripped down image that uses microdnf as a package manager and includes the latest python.</p> <p>The image is based on the RaBe Universal Base Image 9 Minimal which is in turn based on the AlmaLinux 9 UBI9 variant image container provided by AlmaLinux and based on the work from Red Hat.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Based on RaBe Universal Base Image 9 Minimal</li> <li>Contains the latest Python 3.x available in UBI9</li> </ul>"},{"location":"#usage","title":"Usage","text":"<p>Create a downstream image from <code>ghcr.io/radiorabe/python-minimal</code>. Replace <code>:latest</code> with a specific version in the examples below.</p> <pre><code>FROM ghcr.io/radiorabe/python-minimal:latest AS build\nCOPY ./ /app/\n\nRUN    cd /app \\\n&amp;&amp; python3 -mpip --no-cache-dir install wheel \\\n&amp;&amp; python3 setup.py bdist_wheel\n\nFROM ghcr.io/radiorabe/python-minimal:latest AS app\nCOPY --from=build /app/dist/*.whl /tmp/dist/\n\nRUN    python3 -mpip --no-cache-dir install /tmp/dist/*.whl \\\n&amp;&amp; rm -rf /tmp/dist/\n\nUSER nobody\nCMD [\"python3\", \"-mapp\"]\n</code></pre> <p>The argument to <code>CMD</code> needs to call a Python module containing a <code>__main__</code> cli entrypoint. It is recommended that this is packaged as a <code>console_scripts</code> style command line script.</p> <p>You can install os packages using microdnf. ie. if you use setuptools-git-versioning you would install <code>git-core</code> to make it work.</p> <pre><code>FROM ghcr.io/radiorabe/python-minimal:latest AS build\nCOPY ./ /app/\n\nRUN    cd /app \\\n&amp;&amp; microdnf install git-core \\\n&amp;&amp; python3 -mpip --no-cache-dir install setuptools-git-versioning wheel \\\n&amp;&amp; python3 setup.py bdist_wheel\n\nFROM ghcr.io/radiorabe/python-minimal:latest AS app\n# ... same as in first example\n</code></pre> <p>In some cases it can make sense to install some Python requirements as os dependencies. An example would be the postgresql driver that needs to be built against an os postgresql driver and should not be based on a manylinux build from pypi in production.</p> <pre><code>FROM ghcr.io/radiorabe/python-minimal:latest AS build\n# ... same as in first example\nFROM ghcr.io/radiorabe/python-minimal:latest AS app\nRUN    microdnf install python311-psycopg2 \\\n&amp;&amp; microdnf clean all \\\n&amp;&amp; python3 -mpip --no-cache-dir install /tmp/dist/*.whl \\\n&amp;&amp; rm -rf /tmp/dist/\n\nCOPY --from=build /app/dist/*.whl /tmp/dist/\n\nUSER nobody\nCMD [\"python3\", \"-mapp\"]\n</code></pre> <p>In addition to building the container like this, the application needs to ensure that they pin a psycopg2 version range that includes the one provided by the os. You can validate this by checking the output of the container image build which should not contain a <code>Downloading psycopg2*.whl</code> line in the <code>app</code> containers <code>python3 -mpip install</code> phase. </p>"},{"location":"#release-management","title":"Release Management","text":"<p>The CI/CD setup uses semantic commit messages following the conventional commits standard. There is a GitHub Action in .github/workflows/semantic-release.yaml that uses go-semantic-commit to create new releases.</p> <p>The commit message should be structured as follows:</p> <pre><code>&lt;type&gt;[optional scope]: &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre> <p>The commit contains the following structural elements, to communicate intent to the consumers of your library:</p> <ol> <li>fix: a commit of the type <code>fix</code> patches gets released with a PATCH version bump</li> <li>feat: a commit of the type <code>feat</code> gets released as a MINOR version bump</li> <li>BREAKING CHANGE: a commit that has a footer <code>BREAKING CHANGE:</code> gets released as a MAJOR version bump</li> <li>types other than <code>fix:</code> and <code>feat:</code> are allowed and don't trigger a release</li> </ol> <p>If a commit does not contain a conventional commit style message you can fix it during the squash and merge operation on the PR.</p>"},{"location":"#build-process","title":"Build Process","text":"<p>The CI/CD setup uses the Docker build-push Action to publish container images. This is managed in .github/workflows/release.yaml.</p>"},{"location":"#license","title":"License","text":"<p>This application is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, version 3 of the License.</p>"},{"location":"#copyright","title":"Copyright","text":"<p>Copyright (c) 2022 Radio Bern RaBe</p>"}]}